实战：请输入一个表达式：6*5*4—3-2+1
请问：计算机底层到底是如何运算得到结果的？注意不是把简单的算式列出运算，而是要计算机怎么理解这个算式的？[对计算机而言，他接收到的就是一个字符串]

栈(Stack)：是一个先入后出的有序列表。
栈是限制线性表中元素的插入和删除只能在线性表的同一段进行的一种特殊线性表。
    允许插入和删除的一端，为变化的一端，称为栈顶。
    另一端为固定的一端，称为栈底。
根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入元素最先删除，最先放入的最后删除。
    入栈：
    空   -1入栈->                      -2入栈->                      -3入栈->
                                                                                 3    <-栈顶
                                                   2    <-栈顶                    2
                    1   <-栈顶                      1                             1
                        <-栈底                           <-栈底                         <-栈底
    出栈：
                -出栈->

    3   <-栈顶            3  此时3已经出栈，以此类推
    2                    2   <-栈顶
    1                    1
        <-栈底                <-栈底
栈的应用场景：
    子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，一次回到原来的程序中。return
    处理递归地调用：和子程序的调用类似，只是除了存储下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。
    表达式的转换与求值(实际解决也就是上边的问题)。
    二叉树的遍历。
    图形的深度优先搜索法。

思路：
1.使用数组实现，和队列类似但是表现得特征不一样，使用top来表示栈顶，初始化为-1，入栈top++，出栈top——，top为-1即为空，top=maxSize-1即为满。

使用栈完成计算一个表达式的结果：6*5*4—3-2+1
    5
    6                      *
    数栈numberStack:存放数  运算符栈operatorStack:存放运算符
使用栈完成表达式的计算思路：
    通过一个索引值index来遍历表达式；
    如果是一个数字，那么就放入数栈；
    如果是一个操作符，那么就分两种情况：
        如果运算符栈没有运算符，那么就直接入栈；
        如果运算符栈有运算符那么就进行比较：
            如果当前运算符的优先级大于栈中的运算符，那么就直接入栈；
            如果当前运算符的优先级小于或等于栈中的运算符，那么就从数栈中pop出两个数，再从运算符栈中pop一个符号，进行运算得到结果入数栈，然后将当前运算符入运算符栈；
    当表达式扫描完毕，就顺序的从数栈和运算符栈中pop出相应的数和运算符并运行再存入数栈；
    最后在数栈只有一个数字，就是表达式的结果。

扩展：
前缀、中缀、后缀表达式(逆波兰表达式)
前缀表达式(波兰表达式)，前缀表达式的运算符位于操作数之前
举例说明：(3+4)*5-6对应的前缀表达式就是 -*+3456

前缀、中缀、后缀表达式(逆波兰表达式)
前缀表达式的计算机求值：
    从右至左扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算(栈顶元素和次顶元素)，并将结果入栈；
    重复上述过程直到表示式最左端，最后运算得出的值即为表达式的结果。
    例如：(3+4)*5-6对应的前缀表示式就是-*+3456，针对前缀表示式求值步骤如下：
        从右至左扫描，将6、5、4、3压入堆栈
        遇到+运算符，因此弹出3和4(3为栈顶元素，4为此顶元素)，计算出3+4的值，得7，再将7入栈
        接下来是*运算符，因此弹出7和5，计算出7*5=35，将35入栈
        最后是-运算符，计算出35-6的值，即29，由此得出最终结果
中缀表达式：
    中缀表达式就是常见的运算表示式，如(3+4)*5-6
    中缀表达式的求值是我们人最熟悉的，但是计算机来说却不好操作(前面我们讲的案例就能看的这个问题)，因此，在计算结果时，往往会将中缀表示式转成其他表示式来操作(一般转成后缀表达式)
后缀表达式：
    后缀表达式又称逆波兰表达式，与前缀表达式相似，只是运算符位于操作数之后
    举例说明：(3+4)*5-6对应的后缀表达式就是34+5*6-
    再比如：
        正常表达式       逆波兰表达式
        a+b            ab+
        a+(b-c)        abc-+
        a+(b-c)*d      abc-d*+
        a+d*(b-c)      adbc-*+
        a=1+3          a13+=

重要实战：完成一个逆波兰计算器
思路：先将中缀表达式转为后缀表达式；然后把后缀表达式计算出结果。
问题的难点在于如何中缀转后缀？
解决步骤：
    1.定义两个栈：数栈numberStack和运算符栈operatorStack；
    2.从左到右扫描中缀表达式
    3.判断扫描字符串是否为运算符？
        3.1如果为运算符，判断运算符栈是否为空？
            如果为空，直接入运算符栈；
            如果不为空，判断运算符栈顶是否为左括号？
                如果运算符栈顶为左括号，直接入运算符栈；
                如果运算符栈顶不是左括号，判断扫描运算符与运算符栈顶的优先级高低？
                    如果扫描运算符优先级高，直接入运算符栈；
                    如果运算符栈顶优先级高，先将运算符栈顶的运算符出栈存入数栈，再跳转到3.1循环；
        3.2如果不为运算符，判断是否为数？
            如果为数，直接入数栈；
            如果为括号，判断左右？
                如果为左括号，直接入运算符栈；
                如果为右括号，则依次将运算符栈的运算符弹出压入数栈，直到遇到左括号为止，此时这一对括号丢弃；
    4.重复第2-3步，直到表达式的最右边；
    5.将运算符栈中剩余的运算符依次弹出压入数栈；
    6.依次将数栈的元素弹出并输出，结果的逆序即为中缀表达式对应的后缀表达式；