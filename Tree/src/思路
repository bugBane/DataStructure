二叉树：
为什么需要树这种数据结构？
1.数组分析：
    优点：通过下标访问元素，速度快，对于有序数组还可以使用二分查找提高检索速度。
    缺点：如果要检索某一个值或者插入值(按一定顺序)会整体移动，效率较低
2.链式存储分析：
    优点：在一定程度上对数组存储方式有优化(比如插入一个节点，只需要将该节点链接到链表中即可；删除效率也很高)
    缺点：在进行检索时，效率仍然较低(比如检索某个值需要从头节点开始遍历)
3.树存储分析：
    能提高数据存储和读取的效率(比如利用二叉排序树，既可以保证数据的检索速度，同时也可以保证数据的插入，修改，删除速度)

树的常用术语：
    节点
    根节点
    父节点
    子节点
    叶子节点(没有子节点的节点)
    节点的权(节点值)
    路径(从root节点找到该节点的路线)
    层
    子树
    树的高度(最大层数)
    森林：多棵子树构成森林

二叉树的概念：
    树有很多种，每个节点最多只能有两个子节点的一种形式称为二叉树。
    二叉树的子节点分为左节点和右节点。
    如果该二叉树的所有子节点都在最后一层，并且节点总数=2^n-1,n为层数,则我们称为满二叉树。
    如果该二叉树的所有子节点都在最后一层或者倒数第二层，而且最后一层的叶子节点在左边连续，倒数第二层的叶子节点在右边连续，我们称为完全二叉树。

二叉树遍历：使用前序、中序和后序对二叉树进行遍历。
    前序遍历：先输出父节点，再遍历左子树和右子树。
    中序遍历：先遍历左子树，再输出父节点，再遍历右子树。
    后序遍历：先遍历左子树，再遍历右子树，再输出父节点。
    小结：看输出父节点的顺序，就确定是前序中序和后序。
二叉树查找：使用前序、中序和后序对二叉树进行查找。
    前序查找：先判断父节点，再查找左子树和右子树。
    中序查找：先查找左子树，再判断父节点，再查找右子树。
    后序查找：先查找左子树，再查找右子树，再判断父节点。
    注意：与遍历不同的是，查找左树与右树时需要返回节点判断是否为空，不为空才能返回，为空继续向下查找。(如果不判断为空，那么只递归完左树就返回null结束)！！！
二叉树删除：注意删除节点需要借助上一个节点
    如果是叶子节点，将叶子节点置为null
    如果是子节点，将子节点置为null
    如果是root，将树置为null